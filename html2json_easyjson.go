// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package html2json

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	html "golang.org/x/net/html"
	atom "golang.org/x/net/html/atom"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson894ce983DecodeGithubComVGrabko1999GoHtml2json(in *jlexer.Lexer, out *nodeJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(nodeJson, 0, 0)
			} else {
				*out = nodeJson{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Node
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson894ce983EncodeGithubComVGrabko1999GoHtml2json(out *jwriter.Writer, in nodeJson) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v nodeJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson894ce983EncodeGithubComVGrabko1999GoHtml2json(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v nodeJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson894ce983EncodeGithubComVGrabko1999GoHtml2json(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *nodeJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson894ce983DecodeGithubComVGrabko1999GoHtml2json(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *nodeJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson894ce983DecodeGithubComVGrabko1999GoHtml2json(l, v)
}
func easyjson894ce983DecodeGithubComVGrabko1999GoHtml2json1(in *jlexer.Lexer, out *Node) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(map[string]string)
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 string
					v4 = string(in.String())
					(out.Attributes)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "class":
			out.Class = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "href":
			out.Href = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "elements":
			if in.IsNull() {
				in.Skip()
				out.Elements = nil
			} else {
				in.Delim('[')
				if out.Elements == nil {
					if !in.IsDelim(']') {
						out.Elements = make([]Node, 0, 0)
					} else {
						out.Elements = []Node{}
					}
				} else {
					out.Elements = (out.Elements)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Node
					(v5).UnmarshalEasyJSON(in)
					out.Elements = append(out.Elements, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson894ce983EncodeGithubComVGrabko1999GoHtml2json1(out *jwriter.Writer, in Node) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Attributes {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				out.String(string(v6Value))
			}
			out.RawByte('}')
		}
	}
	if in.Class != "" {
		const prefix string = ",\"class\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Class))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Href != "" {
		const prefix string = ",\"href\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Href))
	}
	if in.Text != "" {
		const prefix string = ",\"text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Text))
	}
	if len(in.Elements) != 0 {
		const prefix string = ",\"elements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Elements {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Node) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson894ce983EncodeGithubComVGrabko1999GoHtml2json1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Node) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson894ce983EncodeGithubComVGrabko1999GoHtml2json1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Node) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson894ce983DecodeGithubComVGrabko1999GoHtml2json1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Node) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson894ce983DecodeGithubComVGrabko1999GoHtml2json1(l, v)
}
func easyjson894ce983DecodeGithubComVGrabko1999GoHtml2json2(in *jlexer.Lexer, out *Dom) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Node":
			if in.IsNull() {
				in.Skip()
				out.Node = nil
			} else {
				if out.Node == nil {
					out.Node = new(html.Node)
				}
				easyjson894ce983DecodeGolangOrgXNetHtml(in, out.Node)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson894ce983EncodeGithubComVGrabko1999GoHtml2json2(out *jwriter.Writer, in Dom) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Node\":"
		out.RawString(prefix[1:])
		if in.Node == nil {
			out.RawString("null")
		} else {
			easyjson894ce983EncodeGolangOrgXNetHtml(out, *in.Node)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Dom) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson894ce983EncodeGithubComVGrabko1999GoHtml2json2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Dom) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson894ce983EncodeGithubComVGrabko1999GoHtml2json2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Dom) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson894ce983DecodeGithubComVGrabko1999GoHtml2json2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Dom) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson894ce983DecodeGithubComVGrabko1999GoHtml2json2(l, v)
}
func easyjson894ce983DecodeGolangOrgXNetHtml(in *jlexer.Lexer, out *html.Node) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(html.Node)
				}
				easyjson894ce983DecodeGolangOrgXNetHtml(in, out.Parent)
			}
		case "FirstChild":
			if in.IsNull() {
				in.Skip()
				out.FirstChild = nil
			} else {
				if out.FirstChild == nil {
					out.FirstChild = new(html.Node)
				}
				easyjson894ce983DecodeGolangOrgXNetHtml(in, out.FirstChild)
			}
		case "LastChild":
			if in.IsNull() {
				in.Skip()
				out.LastChild = nil
			} else {
				if out.LastChild == nil {
					out.LastChild = new(html.Node)
				}
				easyjson894ce983DecodeGolangOrgXNetHtml(in, out.LastChild)
			}
		case "PrevSibling":
			if in.IsNull() {
				in.Skip()
				out.PrevSibling = nil
			} else {
				if out.PrevSibling == nil {
					out.PrevSibling = new(html.Node)
				}
				easyjson894ce983DecodeGolangOrgXNetHtml(in, out.PrevSibling)
			}
		case "NextSibling":
			if in.IsNull() {
				in.Skip()
				out.NextSibling = nil
			} else {
				if out.NextSibling == nil {
					out.NextSibling = new(html.Node)
				}
				easyjson894ce983DecodeGolangOrgXNetHtml(in, out.NextSibling)
			}
		case "Type":
			out.Type = html.NodeType(in.Uint32())
		case "DataAtom":
			out.DataAtom = atom.Atom(in.Uint32())
		case "Data":
			out.Data = string(in.String())
		case "Namespace":
			out.Namespace = string(in.String())
		case "Attr":
			if in.IsNull() {
				in.Skip()
				out.Attr = nil
			} else {
				in.Delim('[')
				if out.Attr == nil {
					if !in.IsDelim(']') {
						out.Attr = make([]html.Attribute, 0, 1)
					} else {
						out.Attr = []html.Attribute{}
					}
				} else {
					out.Attr = (out.Attr)[:0]
				}
				for !in.IsDelim(']') {
					var v9 html.Attribute
					easyjson894ce983DecodeGolangOrgXNetHtml1(in, &v9)
					out.Attr = append(out.Attr, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson894ce983EncodeGolangOrgXNetHtml(out *jwriter.Writer, in html.Node) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Parent\":"
		out.RawString(prefix[1:])
		if in.Parent == nil {
			out.RawString("null")
		} else {
			easyjson894ce983EncodeGolangOrgXNetHtml(out, *in.Parent)
		}
	}
	{
		const prefix string = ",\"FirstChild\":"
		out.RawString(prefix)
		if in.FirstChild == nil {
			out.RawString("null")
		} else {
			easyjson894ce983EncodeGolangOrgXNetHtml(out, *in.FirstChild)
		}
	}
	{
		const prefix string = ",\"LastChild\":"
		out.RawString(prefix)
		if in.LastChild == nil {
			out.RawString("null")
		} else {
			easyjson894ce983EncodeGolangOrgXNetHtml(out, *in.LastChild)
		}
	}
	{
		const prefix string = ",\"PrevSibling\":"
		out.RawString(prefix)
		if in.PrevSibling == nil {
			out.RawString("null")
		} else {
			easyjson894ce983EncodeGolangOrgXNetHtml(out, *in.PrevSibling)
		}
	}
	{
		const prefix string = ",\"NextSibling\":"
		out.RawString(prefix)
		if in.NextSibling == nil {
			out.RawString("null")
		} else {
			easyjson894ce983EncodeGolangOrgXNetHtml(out, *in.NextSibling)
		}
	}
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Type))
	}
	{
		const prefix string = ",\"DataAtom\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.DataAtom))
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"Namespace\":"
		out.RawString(prefix)
		out.String(string(in.Namespace))
	}
	{
		const prefix string = ",\"Attr\":"
		out.RawString(prefix)
		if in.Attr == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Attr {
				if v10 > 0 {
					out.RawByte(',')
				}
				easyjson894ce983EncodeGolangOrgXNetHtml1(out, v11)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson894ce983DecodeGolangOrgXNetHtml1(in *jlexer.Lexer, out *html.Attribute) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Namespace":
			out.Namespace = string(in.String())
		case "Key":
			out.Key = string(in.String())
		case "Val":
			out.Val = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson894ce983EncodeGolangOrgXNetHtml1(out *jwriter.Writer, in html.Attribute) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Namespace\":"
		out.RawString(prefix[1:])
		out.String(string(in.Namespace))
	}
	{
		const prefix string = ",\"Key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"Val\":"
		out.RawString(prefix)
		out.String(string(in.Val))
	}
	out.RawByte('}')
}
